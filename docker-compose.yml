version: '3.8'

services:
  # Message broker (Redpanda)
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: edr-redpanda
    command:
      - redpanda
      - start
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --overprovisioned
      - --node-id=0
      - --check=false
      - --pandaproxy-addr=0.0.0.0:8082
      - --advertise-pandaproxy-addr=redpanda:8082
      - --kafka-addr=0.0.0.0:9092
      - --advertise-kafka-addr=redpanda:9092
      - --rpc-addr=0.0.0.0:33145
      - --advertise-rpc-addr=redpanda:33145
      - --mode=dev-container
      - --set redpanda.auto_create_topics_enabled=true
    ports:
      - "9092:9092"  # Kafka API
      - "8083:8081"  # Redpanda Admin (changed from 8081 to 8083)
      - "8082:8082"  # HTTP Proxy
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    networks:
      - edr-network

  # Redpanda Console (Admin UI)
  redpanda-console:
    image: redpandadata/console:latest
    container_name: edr-redpanda-console
    environment:
      - KAFKA_BROKERS=redpanda:9092
    ports:
      - "8080:8080"
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - edr-network

  # ClickHouse database
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: edr-clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    volumes:
      - ./config/clickhouse/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ./config/clickhouse/users.xml:/etc/clickhouse-server/users.d/users.xml
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "--tries=1", "http://localhost:8123/ping"]
      interval: 5s
      timeout: 5s
      retries: 3
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - edr-network

  # Flink JobManager
  jobmanager:
    image: flink:1.18.1
    container_name: edr-flink-jobmanager
    command: jobmanager
    ports:
      - "8081:8081"  # Web UI
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        jobmanager.memory.process.size: 1024m
        taskmanager.memory.process.size: 1024m
        state.backend: rocksdb
        state.backend.incremental: true
        parallelism.default: 4
        execution.checkpointing.interval: 1000
        state.savepoints.dir: file:///opt/flink/savepoints
    volumes:
      - ./volumes/flink-checkpoints:/opt/flink/checkpoints
      - ./volumes/flink-savepoints:/opt/flink/savepoints
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - edr-network

  # Flink TaskManager
  taskmanager:
    image: flink:1.18.1
    container_name: edr-flink-taskmanager
    command: taskmanager
    scale: 1
    depends_on:
      jobmanager:
        condition: service_healthy
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 4
        taskmanager.memory.process.size: 1024m
    volumes:
      - ./volumes/flink-checkpoints:/opt/flink/checkpoints
      - ./volumes/flink-savepoints:/opt/flink/savepoints
    networks:
      - edr-network

  # Redis for API caching
  redis:
    image: redis:alpine
    container_name: edr-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly no --maxmemory 256mb --maxmemory-policy volatile-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - edr-network

  # Lightweight API service (Mock)
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: edr-api
    ports:
      - "3000:3000"
    environment:
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=edrpassword
      - CLICKHOUSE_DATABASE=edr
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=3000
      - NODE_ENV=development
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "--tries=1", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./api:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - edr-network

  # Development Dashboard (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: edr-grafana
    ports:
      - "3002:3000"  # Changed from 3001:3000 to avoid conflict with webui
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      clickhouse:
        condition: service_healthy
    networks:
      - edr-network
      
  # Data Generator (for easier connection to Redpanda)
  data-generator:
    build:
      context: ./generator
      dockerfile: Dockerfile
    container_name: edr-data-generator
    depends_on:
      redpanda:
        condition: service_healthy
    volumes:
      - ./scripts:/app/scripts
    networks:
      - edr-network

  # XDR/EDR Web UI
  webui:
    build:
      context: ./webui
      dockerfile: Dockerfile
    container_name: edr-webui
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "--tries=1", "http://localhost:3001/"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./webui:/app
      - /app/node_modules
    networks:
      - edr-network

volumes:
  redpanda_data:
  clickhouse_data:
  redis_data:

networks:
  edr-network:
    driver: bridge
